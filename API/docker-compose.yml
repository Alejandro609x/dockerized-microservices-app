version: "3.8"  # Versión del esquema de Docker Compose a utilizar

services:  # Sección que define todos los servicios (contenedores) de la aplicación

  # Servicio de productos
  products_service:
    build: ./products_service  # Construye la imagen Docker usando el Dockerfile en ./products_service
    ports:
      - "8001:8000"  # Mapea el puerto 8000 del contenedor al 8001 del host (localhost:8001)
    depends_on:
      - db_postgresql  # Este contenedor depende de que el servicio db_postgresql esté iniciado
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db_postgresql:5432/products_db  # Variable de entorno para conectarse a PostgreSQL
    volumes:
      - ./products_service/src:/app/src  # Sincroniza el código fuente local con el contenedor para desarrollo en caliente
    networks:
      - hanka_network  # Conecta el contenedor a la red llamada hanka_network

  # Servicio de usuarios
  users_service:
    build: ./users_service  # Construye la imagen Docker desde ./users_service
    ports:
      - "8002:8000"  # Mapea el puerto 8000 del contenedor al 8002 del host (localhost:8002)
    depends_on:
      - db_mysql  # Este contenedor depende de que el servicio db_mysql esté iniciado
    environment:
      - DATABASE_URL=mysql+pymysql://root:password@db_mysql:3306/users_db  # Cadena de conexión a MySQL (usuario root, contraseña password)
    volumes:
      - ./users_service/src:/app/src  # Sincroniza el código fuente local con el contenedor
    networks:
      - hanka_network  # Conecta el contenedor a la red llamada hanka_network

  # API Gateway
  api_gateway:
    build:
      context: ./api_gateway  # Construye la imagen Docker desde ./api_gateway
    container_name: api_gateway  # Asigna un nombre explícito al contenedor
    ports:
      - "8000:8000"  # Mapea el puerto 8000 del contenedor al 8000 del host (localhost:8000)
    volumes:
      - ./volumes/shared_csv:/volumes/shared_csv  # Monta un volumen compartido para archivos CSV entre servicios
    depends_on:
      - users_service  # Espera que users_service esté iniciado antes de arrancar este contenedor
      - products_service  # Espera que products_service esté iniciado también
    networks:
      - hanka_network  # Conecta el contenedor a la red llamada hanka_network

  # Base de datos MySQL para usuarios
  db_mysql:
    image: mysql:8.0  # Usa la imagen oficial de MySQL versión 8.0
    restart: always  # Siempre reinicia el contenedor si se detiene
    environment:
      MYSQL_ROOT_PASSWORD: password  # Contraseña del usuario root
      MYSQL_DATABASE: users_db  # Crea la base de datos llamada users_db al iniciar
      MYSQL_USER: user  # Crea un usuario adicional llamado 'user'
      MYSQL_PASSWORD: password  # Contraseña del usuario 'user'
    volumes:
      - mysql_data:/var/lib/mysql  # Volume para persistencia de datos de MySQL
    networks:
      - hanka_network  # Conecta el contenedor a la red llamada hanka_network

  # Base de datos PostgreSQL para productos
  db_postgresql:
    image: postgres:15  # Usa la imagen oficial de PostgreSQL versión 15
    restart: always  # Siempre reinicia el contenedor si se detiene
    environment:
      POSTGRES_DB: products_db  # Crea la base de datos llamada products_db
      POSTGRES_USER: postgres  # Usuario principal de la base de datos
      POSTGRES_PASSWORD: postgres  # Contraseña del usuario postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data  # Volume para persistencia de datos de PostgreSQL
    networks:
      - hanka_network  # Conecta el contenedor a la red llamada hanka_network

volumes:
  mysql_data:  # Volume nombrado para persistencia de MySQL
  postgres_data:  # Volume nombrado para persistencia de PostgreSQL

networks:
  hanka_network:
    driver: bridge  # Usa el driver de red tipo bridge (red privada para los contenedores)

